### create User
POST http://localhost:8000/user-service/users
Content-Type: application/json

{
  "name": "pilhwan",
  "email": "aaa1@naver.com",
  "pwd": "abcd1234"
}

### get Users
GET http://localhost:8000/user-service/users
Content-Type: application/json

### get User
GET http://localhost:8000/user-service/users/0018ed0f-67f0-4c5d-8b81-4adb8a9fa55b
Authorization: Bearer {{token}}
Content-Type: application/json

### login Users
POST http://localhost:8000/user-service/login
Content-Type: application/json

{
  "email": "aaa1@naver.com",
  "password": "abcd1234"
}

> {%
    client.test("Validate", function() { // Validate라는 이름의 테스트를 수행
        client.assert(response.status === 200, "Response status is not 200"); // 응답값이 200이면 통과
        // client.assert(response.headers.token.trim().length > 0); // 토큰 길이가 0보다 크면 통과
    });
    client.log(response.headers); // 응답받은 body를 로깅
    client.log(response.headers.valueOf("token")); // 토큰 값 로깅, body에는 응답받은 json이 객체 형식으로 저장된다. 즉 { accessToken:"value" }가 응답이라면, 여기선 value라 로깅된다.
    client.global.set("token",response.headers.valueOf("token")) // 토큰 값을 global 변수에 set
%}

### welcome
GET http://localhost:8000/user-service/welcome
Content-Type: application/json
Authorization: Bearer {{token}}

### health-check
GET http://localhost:8000/user-service/health-check
Content-Type: application/json

### actuator/health
GET http://localhost:8000/user-service/actuator/health
Content-Type: application/json

### actuator/beans
GET http://localhost:8000/user-service/actuator/beans
Content-Type: application/json

### actuator/refresh
POST http://localhost:8000/user-service/actuator/refresh
Content-Type: application/json

### actuator/busrefresh
POST http://localhost:8000/user-service/actuator/busrefresh
Content-Type: application/json